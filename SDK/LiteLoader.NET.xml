<?xml version="1.0"?>
<doc>
    <assembly>
        "LiteLoader.NET"
    </assembly>
    <members>
        <member name="M:MC.Player.SendCustomFormPacket(System.String,MC.Player.callBackFunc_String)">
            <summary>
QAQ
</summary>
            <param name="data" />
            <param name="callback" />
            <returns />
        </member>
        <member name="T:LLNET.AllowList.AllowListManager">
            <summary> 
For managing AllowList
<example><para>[Usage]</para><para>AllowListManager().has("steve"[, "114514"]);</para><para>AllowListManager().add("alex"[, "11451419", true]).reload();</para><para>AllowListManager().remove("mojang"[, "233333"]).reload();</para><para>AllowListManager().add(...).remove(...).reload();</para><para>[Note]</para><para>If you don't call reload after add/remove, the changes will only write to file
but it will not take effect in the game.
This means the player you added won't be able to join the game until reloading</para></example></summary>
        </member>
        <member name="M:LLNET.RemoteCall.DynamicRemoteCallAPI.ImportAs``1(System.String,System.String)">
            <summary>
Will cause memory leak.　QAQ
</summary>
        </member>
        <member name="M:LLNET.RemoteCall.DynamicRemoteCallAPI.ExportAs``1(System.String,System.String,``0)">
            <summary>
Will cause memory leak.　QAQ
</summary>
            <returns />
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``10(System.String,System.String)">
            <summary>
Import a function that has nine parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``9(System.String,System.String)">
            <summary>
Import a function that has eight parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``8(System.String,System.String)">
            <summary>
Import a function that has seven parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``7(System.String,System.String)">
            <summary>
Import a function that has six parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``6(System.String,System.String)">
            <summary>
Import a function that has five parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``5(System.String,System.String)">
            <summary>
Import a function that has four parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``4(System.String,System.String)">
            <summary>
Import a function that has three parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``3(System.String,System.String)">
            <summary>
Import a function that has two parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``2(System.String,System.String)">
            <summary>
Import a function that has one parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportAs``1(System.String,System.String)">
            <summary>
Import a function that has no parameters and returns a value of the type specified by the TResult parameter.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``9(System.String,System.String)">
            <summary>
Import a function that has nine parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``8(System.String,System.String)">
            <summary>
Import a function that has eight parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``7(System.String,System.String)">
            <summary>
Import a function that has seven parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``6(System.String,System.String)">
            <summary>
Import a function that has six parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``5(System.String,System.String)">
            <summary>
Import a function that has five parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``4(System.String,System.String)">
            <summary>
Import a function that has four parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``3(System.String,System.String)">
            <summary>
Import a function that has three parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``2(System.String,System.String)">
            <summary>
Import a function that has two parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As``1(System.String,System.String)">
            <summary>
Import a function that has a single parameter and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.Import_As(System.String,System.String)">
            <summary>
Import a function that has no parameters and does not return a value.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Function</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ExportAs``1(System.String,System.String,``0)">
            <summary>
Export a function as a function porotype.
<para>　</para><para><example><para>Example:</para><code>
delegate bool Example(int a1, string str, List&lt;double&gt; doubleList);
<para>　</para><para>ExportAs&lt;Example&gt;(".NET","ExampleFunction",(a1,str,doubleList)=&gt;{</para><para>return true;</para><para>});</para></code></example></para></summary>
            <typeparam name="TDelegate">－Function Porotype</typeparam>
            <param name="nameSpace">－Export Function NameSpace</param>
            <param name="funcName">－Export Function Name</param>
            <param name="fn">－Export Function</param>
            <returns>－Is The Export Successful</returns>
            <exception cref="T:LLNET.Core.InvalidRemoteCallTypeException" />
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.RemoveFunc(System.String,System.String)">
            <summary>
Remove exported function by NameSpace and function name.
</summary>
            <param name="nameSpace">－Function NameSpace</param>
            <param name="funcName">－Function Name</param>
            <returns />
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.HasFunc(System.String,System.String)">
            <summary>
Determine if this function has been exported.
</summary>
            <param name="nameSpace">－Function NameSpace</param>
            <param name="funcName">－Function Name</param>
            <returns />
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ImportFunc(System.String,System.String)">
            <summary>
Import a function with NameSpace, function name.
</summary>
            <param name="nameSpace">－Import Function NameSpace</param>
            <param name="funcName">－Import Funcrion Name</param>
            <returns>－Imported function.</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ExportFunc(System.String,System.String,LLNET.RemoteCall.RemoteCallAPI.CallbackFn,System.IntPtr)">
            <summary>
                <para>Export a function with NameSpace, function name, and plugin handle.</para>
                <para>　</para>
                <para>example:</para>
                <para>　<code>ExportedFunc(".NET","ExampleFunction",(args) =&gt; { });</code></para>
                <para />
            </summary>
            <param name="nameSpace">－Export Function NameSpace</param>
            <param name="funcName">－Export Function Name</param>
            <param name="fn">－Export Function</param>
            <param name="handle">－Plugin Handler</param>
            <returns>－Is The Export Successful</returns>
        </member>
        <member name="M:LLNET.RemoteCall.RemoteCallAPI.ExportFunc(System.String,System.String,LLNET.RemoteCall.RemoteCallAPI.CallbackFn)">
            <summary>
                <para>Export a function with NameSpace, function name.</para>
                <para>　</para>
                <para>example:</para>
                <para>　<code>ExportedFunc(".NET","ExampleFunction",(args) =&gt; { });</code></para>
                <para />
            </summary>
            <param name="nameSpace">－Export Function NameSpace</param>
            <param name="funcName">－Export Function Name</param>
            <param name="fn">－Export Function</param>
            <returns>－Is The Export Successful</returns>
        </member>
        <member name="T:LLNET.RemoteCall.RemoteCallAPI.CallbackFn">
            <summary>
Remote call function prototype.
</summary>
        </member>
        <member name="T:LLNET.RemoteCall.RemoteCallAPI">
            <summary>
========Remote Call API========
<para>　</para><para>Mainly designed for scripting engines</para><para>Please call it in MC_SERVER thread or in ScheduleAPI</para></summary>
        </member>
        <member name="M:LLNET.Hook.HookAPI.SYM``1(System.String)">
            <summary>
FunctionProtorype = Function Protorype Delegate
</summary>
        </member>
        <member name="M:LLNET.Hook.HookAPI.VirtualFuction``1(System.IntPtr,System.UInt64)">
            <summary>
VirtualProtorype = Virtual Function Protorype Delegate
</summary>
        </member>
        <member name="M:LLNET.Core.SecondaryRankPtr.ToIntPtr">
            <returns>IntPtr(*ptr)   type:void*</returns>
        </member>
        <member name="M:LLNET.Core.SecondaryRankPtr.ToSecIntPtr">
            <returns>IntPtr(ptr)   type:void**</returns>
        </member>
        <member name="M:LLNET.Core.SecondaryRankPtr.#ctor(System.IntPtr)">
            <param name="p2">:Secondary Rank Pointer IntPtr </param>
        </member>
        <member name="T:LLNET.DynamicCommand.ICommand">
            <summary>
Inherited this interface to register a new command by DynamicCommand.RegisterCommand&lt;ICommand&gt;().
<example><para /><code><para>[Command("examplecmd", Description = "example command.", Permission = MC.CommandPermissionLevel.Any)]</para><para>class ExampleCommand : ICommand</para><para>{</para><para>void Execute(MC.CommandOrigin origin, MC.CommandOutput output){ }</para><para /><para>[CommandParameter(ParamType.String)]</para><para>string? Parameter_1 { get; set; }</para><para>};</para></code></example></summary>
        </member>
        <member name="T:LLNET.DynamicCommand.CommandEmptyOverloadAttribute">
            <summary>
Indicates that the command has empty overload.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandParameterOverloadAttribute.OverloadId">
            <summary>
Command parameter overload id.
</summary>
        </member>
        <member name="M:LLNET.DynamicCommand.CommandParameterOverloadAttribute.#ctor(System.Int32)">
            <summary>
Command parameter overload id.
</summary>
        </member>
        <member name="T:LLNET.DynamicCommand.CommandParameterOverloadAttribute">
            <summary>
Indicates the parameter overload id.
</summary>
        </member>
        <member name="P:LLNET.DynamicCommand.CommandParameterAttribute.OverloadId">
            <summary>
Indicates the parameter overload id.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandParameterAttribute.Option">
            <summary>
Command parameter option.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandParameterAttribute.Identifier">
            <summary>
QAQ
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandParameterAttribute.IsMandatory">
            <summary>
Indicates whether this parameter is mandatory or not.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandParameterAttribute.Type">
            <summary>
Command parameter type.
</summary>
        </member>
        <member name="M:LLNET.DynamicCommand.CommandParameterAttribute.#ctor(LLNET.DynamicCommand.DynamicCommand.ParameterType)">
            <summary />
            <param name="paramType">
                <para>Command parameter type.</para>
                <para>Please check the parameter type, or you will get a cute exception.</para>
            </param>
        </member>
        <member name="T:LLNET.DynamicCommand.CommandParameterAttribute">
            <summary>
Indicates that a field or property will be registered.
</summary>
        </member>
        <member name="T:LLNET.DynamicCommand.CommandEnumAttribute">
            <summary>
Indicates that a enum will be registered.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandAliasAttribute.Alia">
            <summary>
Command Alia.
</summary>
        </member>
        <member name="M:LLNET.DynamicCommand.CommandAliasAttribute.#ctor(System.String)">
            <summary />
/// <param name="alia">Command Alia.</param></member>
        <member name="T:LLNET.DynamicCommand.CommandAliasAttribute">
            <summary>
Set command alias by attribute.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandAttribute.AutoReset">
            <summary>
These command parameters will be reset after excuted by creating a new instance.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandAttribute.Alia">
            <summary>
Command Alia.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandAttribute.Permission">
            <summary>
Command execution permission.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandAttribute.Description">
            <summary>
Command description.
</summary>
        </member>
        <member name="F:LLNET.DynamicCommand.CommandAttribute.Name">
            <summary>
Command name, lower-case only.
</summary>
        </member>
        <member name="M:LLNET.DynamicCommand.CommandAttribute.#ctor(System.String)">
            <param name="name">Command name, lower-case only.</param>
        </member>
        <member name="T:LLNET.DynamicCommand.CommandAttribute">
            <summary>
Provides registration info for a command class.
</summary>
        </member>
        <member name="P:LLNET.DynamicCommand.DynamicCommandInstance.EnumNames">
            <summary>
unique_ptr&lt;std::string&gt;
</summary>
        </member>
        <member name="M:CommandOutput.setLanguageCode(CommandOrigin!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Set the output language code of this CommandOutput object(convenience func).

@param ori  The command origin object for the CommandOutput object

</member>
        <member name="M:CommandOutput.setLanguageCode(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Set the output language code of this CommandOutput object.

@param code  The language code

</member>
        <member name="M:CommandOutput.error(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @brief Output a success message(without I18N).

 @param str  The message

</member>
        <member name="M:CommandOutput.success(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @brief Output a success message(without I18N).

 @param str  The message

</member>
        <member name="M:CommandOutput.addMessage(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Output a message(without I18N).

@param str  The message

</member>
        <member name="M:MC.Level.GetPlayer(System.ValueType!MC.ActorUniqueID!System.Runtime.CompilerServices.IsBoxed)">
UniqueID
</member>
        <member name="M:MC.Level.GetPlayer(System.String)">
name or xuid
</member>
        <member name="M:MC.BoundingBox.ForEachBlockInBox_pFunc(=FUNC:System.Void(MC.BlockPos!System.Runtime.CompilerServices.IsConst@))">
            <summary>
More Faster
</summary>
            <param name="pfunc">Function Pointer</param>
        </member>
        <member name="T:seh_exception">
@Description: a class for convert SEH exception to c++ exception
@Author: shang_cm
@Date: 2020-06-01 16:09:00
@LastEditTime: 2010-06-01 16:09:00
@LastEditors: shang_cm

</member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor(System.Collections.Generic.Dictionary`2{System.String,LLNET.RemoteCall.Valuetype})">
            <summary>
Initializes a new instance of the RemoteCall.Valuetype class to the value
indicated by a System.Collections.Generic.Dictionary of System.String and RemoteCall.Valuetype.
</summary>
            <param name="v" />
        </member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor(System.Collections.Generic.List`1{LLNET.RemoteCall.NumberType})">
            <summary>
Initializes a new instance of the RemoteCall.Valuetype class to the value
indicated by a System.Collections.Generic.List of RemoteCall.NumberType.
</summary>
            <param name="v">A System.Collections.Generic.List of RemoteCall.NumberType</param>
        </member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor(System.Collections.Generic.List`1{System.String})">
            <summary>
Initializes a new instance of the RemoteCall.Valuetype class to the value
indicated by a System.Collections.Generic.List of System.String.
</summary>
            <param name="v">A System.Collections.Generic.List of System.String.</param>
        </member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor(System.Collections.Generic.List`1{LLNET.RemoteCall.Valuetype})">
            <summary>
Initializes a new instance of the RemoteCall.Valuetype class to the value
indicated by a System.Collections.Generic.List of RemoteCall.Valuetype.
</summary>
            <param name="v">A System.Collections.Generic.List of RemoteCall.Valuetype.</param>
        </member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor(LLNET.RemoteCall.Valuetype[])">
            <summary>
Initializes a new instance of the RemoteCall.Valuetype class to the value
indicated by an array of RemoteCall.Valuetype.
</summary>
            <param name="v">An array of RemoteCall.Valuetype</param>
        </member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor(LLNET.RemoteCall.Value)">
            <summary>
Initializes a new instance of the RemoteCall.Valuetype class with a RemoteCall.Value object.
</summary>
        </member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor(LLNET.RemoteCall.Valuetype!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy constructor
</summary>
        </member>
        <member name="M:LLNET.RemoteCall.Valuetype.#ctor">
            <summary>
Initializes a new instance of the RemoteCall.Valuetype class that is empty.
</summary>
        </member>
        <member name="M:LLNET.RemoteCall.Value.#ctor(LLNET.RemoteCall.Value!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy
</summary>
            <param name="val" />
        </member>
        <member name="M:MC.Player.OnSizeUpdated">
            <summary>
                <para>*265*/ virtual void readAdditionalSaveData(class CompoundTag const&amp;, class DataLoadHelper&amp;);</para>
                <para>*266*/ virtual void addAdditionalSaveData(class CompoundTag&amp;);</para>
            </summary>
        </member>
        <member name="M:MC.Player.SendBossEventPacket(MC.BossEvent,System.String,System.Single,MC.BossEventColour,System.Int32)">
            <param name="overlay">:default = 0</param>
            <param name="overlay">:default = 0</param>
        </member>
        <member name="M:MC.Player.SendSpawnParticleEffectPacket(MC.Vec3,System.Int32,System.String,System.Int64)">
            <param name="EntityUniqueID">:default = -1</param>
            <param name="EntityUniqueID">:default = -1</param>
        </member>
        <member name="M:MC.Player.SendTextPacket(System.String,MC.TextType)">
            <param name="Type">:default = TextType::RAW</param>
            <param name="Type">:default = TextType::RAW</param>
        </member>
        <member name="M:MC.Player.SendText(System.String,MC.TextType)">
            <param name="type">:default = TextType::RAW</param>
            <param name="type">:default = TextType::RAW</param>
        </member>
        <member name="M:MC.Player.GetTotalXpNeededForLevel(System.Int32)">
            <summary>
Experience required to upgrade to level from level 0
</summary>
            <summary>
Experience required to upgrade to level from level 0
</summary>
        </member>
        <member name="M:MC.Player.GetXpNeededForLevel(System.Int32)">
            <summary>
Experience required to upgrade to level from (level-1)
</summary>
            <summary>
Experience required to upgrade to level from (level-1)
</summary>
        </member>
        <member name="P:MC.Player.TotalExperience">
            <summary>
                <exception cref="T:LLNET.Core.MCException" />
            </summary>
        </member>
        <member name="P:MC.Player.CurrentExperience">
            <summary>
                <exception cref="T:LLNET.Core.MCException" />
            </summary>
        </member>
        <member name="P:MC.BlockInstance.BlockId">
            <summary>
Get the block id in the current MC.BlockInstance object.
</summary>
        </member>
        <member name="P:MC.BlockInstance.HasContainer">
            <summary>
Determine if this block instance has a container.
</summary>
        </member>
        <member name="P:MC.BlockInstance.IsNull">
            <summary>
Determine if this block instance is null.
</summary>
        </member>
        <member name="P:MC.BlockInstance.HasBlockEntity">
            <summary>
Determine if this block instance has a block entity.
</summary>
        </member>
        <member name="P:MC.BlockInstance.DimensionId">
            <summary>
Get the dimension id in the current MC.BlockInstance object.
</summary>
        </member>
        <member name="P:MC.BlockInstance.BlockDrops">
            <summary>
Get the drop item in the current MC.BlockInstance object.
</summary>
        </member>
        <member name="P:MC.BlockInstance.Container">
            <summary>
Get the container owned by the current MC.BlockInstance object.
</summary>
        </member>
        <member name="P:MC.BlockInstance.BlockEntity">
            <summary>
Get the block entity owned by the current MC.BlockInstance object.
</summary>
        </member>
        <member name="P:MC.BlockInstance.BlockSource">
            <summary>
Get the block source in the current MC.BlockInstance object.
</summary>
        </member>
        <member name="P:MC.BlockInstance.Position">
            <summary>
Get the position in the current MC.BlockInstance object.
</summary>
        </member>
        <member name="P:MC.BlockInstance.Block">
            <summary>
Get the block in the current MC.BlockInstance object.
</summary>
        </member>
        <member name="M:MC.BlockInstance.BreakNaturally(MC.ItemStack)">
            <summary>
Break this block naturally with tool.
</summary>
            <param name="tool">The item of tool</param>
        </member>
        <member name="M:MC.BlockInstance.BreakNaturally(MC.ItemStack,System.Boolean)">
            <summary>
Break this block naturally with tool.
</summary>
            <param name="tool">The item of tool</param>
        </member>
        <member name="M:MC.BlockInstance.BreakNaturally">
            <summary>
Break this block naturally.
</summary>
        </member>
        <member name="M:MC.BlockInstance.BreakNaturally(System.Boolean)">
            <summary>
Break this block naturally.
</summary>
        </member>
        <member name="M:MC.BlockInstance.Create">
            <summary>
Create a instance of the MC.BlockInstance class that is empty
</summary>
            <returns>A instance of the MC.BlockInstance</returns>
        </member>
        <member name="M:MC.BlockInstance.Create(MC.Block,MC.BlockPos)">
            <summary>
Create a instance of the MC.BlockInstance class from block and block position with default dimension id.
</summary>
            <param name="block">Block</param>
            <param name="pos">Block Position</param>
            <returns>A instance of the MC.BlockInstance</returns>
        </member>
        <member name="M:MC.BlockInstance.Create(MC.Block,MC.BlockPos,System.Int32)">
            <summary>
Create a instance of the MC.BlockInstance class from block, position, and dimension id.
</summary>
            <param name="block">Block</param>
            <param name="pos">Position</param>
            <param name="dimid">
Dimension id
<para /><para>dimid:</para><para>0 : OverWorld</para><para>1 : The Nether</para><para>2 : The End</para></param>
            <returns>A instance of the MC.BlockInstance</returns>
        </member>
        <member name="M:Translation.loadFrom(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Load translation from another plugin.

@param  plugin  The plugin name.
@return I18N*   The pointer to the I18N object in PluginOwnData, null if failed

</member>
        <member name="M:Translation.load(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.SByte!System.Runtime.Compile">
 @brief Load translation from a file.

 @param  filePath         The path to the i18n file(json)
 @param  defaultLangCode  The default language code(if no lang code is specified, it will use this)
 @param  defaultLangData  The default translation data
 @return I18N*            The pointer to the I18N object in PluginOwnData, null if failed

</member>
        <member name="M:I18N.get(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @brief Get the translation of the specified key.

 @param  key          The language key
 @param  langCode     The language code like en_US,zh_CN("" =&gt; this-&gt;defaultLangCode)
 @return std::string  The translation
 @see    I18N::defaultLangCode

</member>
        <member name="M:I18N.#ctor(I18N!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor
</member>
        <member name="M:I18N.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServi">
 @brief Construct a I18N object.

 @param filePath         The path to the i18n file(json)
 @param defaultLangCode  The default language code(if no lang code is specified, it will use this)
 @param defaultLangData  The default translation data
 @param hModule          The plugin handler(to set PluginOwnData)
 @note  This constructor must be defined in header

</member>
        <member name="T:I18N">
 @brief I18N API class.


</member>
        <member name="T:LL.ServerStatus">
Server Status
</member>
        <member name="M:LL.getLoaderHandle">
@breif Get the handle of LiteLoader.dll.

@return HMODULE  The handle

</member>
        <member name="M:LL.hasPlugin(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief Get whether the plugin is loaded

@param  name  The name of the plugin
@return bool  True if the plugin is loaded

</member>
        <member name="M:LL.getPlugin(HINSTANCE__*)">
@brief Get a loaded plugin by HMODULE handle

@param  name         The name of the plugin
@return LL::Plugin*  The plugin(nullptr if not found)

</member>
        <member name="M:LL.getPlugin(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
@brief Get a loaded plugin by name

@param  name         The name of the plugin
@return LL::Plugin*  The plugin(nullptr if not found)

</member>
        <member name="M:LL.registerPlugin(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,LL.Version,std.map&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUns">
@brief Register a plugin

@param  name     The name of the plugin
@param  desc     The descirption(introduction) of the plugin
@param  version  The version of the plugin(LL::Version)
@param  others   The other information of the plugin(key-value)
@return bool     True if the plugin is registered successfully
@note   The implementation of this function must be in header file(because of `GetCurrentModule`)

@par Example
@code
LL::registerPlugin("Test", "A test plugin", Version(0, 0, 1, Version::Dev), {{"Note","This is Note"}});
@endcode

</member>
        <member name="M:LL.registerPlugin(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,LL.Version,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecified">
@brief Register a plugin

@param  name     The name of the plugin
@param  desc     The description(introduction) of the plugin
@param  version  The version of the plugin(LL::Version)
@param  git      The git information of the plugin
@param  license  The license of the plugin
@param  website  The website
@return bool     True if the plugin is registered successfully
@note   The implementation of this function must be in header file(because of `GetCurrentModule`)

</member>
        <member name="M:LL.getDataPath(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Get the data path of the plugin

@param  pluginName   The name of the plugin
@return std::string  The data path of the plugin

</member>
        <member name="M:LL.isDebugMode">
@brief Get whether LiteLoader is in debug mode

@return bool  True if it is in debug mode

</member>
        <member name="M:LL.getLoaderVersion">
@brief Get the loader version as a Version object

@return LL::Version  The loader version

</member>
        <member name="M:LL.getLoaderVersionString">
 @brief Get the loader version as a string

 @return std::string  The loader version

</member>
        <member name="F:numberOfCommentPlacement">
root value)
</member>
        <member name="M:&quot;&quot;_json_pointer(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
@brief user-defined string literal for JSON pointer
@sa https://json.nlohmann.me/api/basic_json/operator_literal_json_pointer/
</member>
        <member name="M:&quot;&quot;_json(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
@brief user-defined string literal for JSON values
@sa https://json.nlohmann.me/api/basic_json/operator_literal_json/
</member>
        <member name="T:nlohmann.detail.error_handler_t">
how to treat decoding errors
</member>
        <member name="M:nlohmann.detail.primitive_iterator_t.is_end">
return whether the iterator is at end
</member>
        <member name="M:nlohmann.detail.primitive_iterator_t.is_begin">
return whether the iterator can be dereferenced
</member>
        <member name="M:nlohmann.detail.primitive_iterator_t.set_end">
set iterator to a defined past the end
</member>
        <member name="M:nlohmann.detail.primitive_iterator_t.set_begin">
set iterator to a defined beginning
</member>
        <member name="F:nlohmann.detail.primitive_iterator_t.m_it">
iterator as signed integer type
</member>
        <member name="F:value">
the parser finished reading a JSON value
</member>
        <member name="F:key">
the parser read a key of a value in an object
</member>
        <member name="F:array_end">
the parser read `]` and finished processing a JSON array
</member>
        <member name="F:array_start">
the parser read `[` and started to process a JSON array
</member>
        <member name="F:object_end">
the parser read `}` and finished processing a JSON object
</member>
        <member name="F:object_start">
the parser read `{` and started to process a JSON object
</member>
        <member name="T:nlohmann.detail.cbor_tag_handler_t">
how to treat CBOR tags
</member>
        <member name="F:nlohmann.detail.input_stream_adapter.is">
the associated input stream
</member>
        <member name="F:nlohmann.detail.file_input_adapter.m_file">
the file pointer to read from
</member>
        <member name="T:nlohmann.detail.input_format_t">
the supported input formats
</member>
        <member name="T:nlohmann.detail.other_error">
@brief exception indicating other library errors
@sa https://json.nlohmann.me/api/basic_json/other_error/
</member>
        <member name="T:nlohmann.detail.out_of_range">
@brief exception indicating access out of the defined range
@sa https://json.nlohmann.me/api/basic_json/out_of_range/
</member>
        <member name="T:nlohmann.detail.type_error">
@brief exception indicating executing a member function with a wrong type
@sa https://json.nlohmann.me/api/basic_json/type_error/
</member>
        <member name="T:nlohmann.detail.invalid_iterator">
@brief exception indicating errors with iterators
@sa https://json.nlohmann.me/api/basic_json/invalid_iterator/
</member>
        <member name="T:nlohmann.detail.parse_error">
@brief exception indicating a parse error
@sa https://json.nlohmann.me/api/basic_json/parse_error/
</member>
        <member name="F:nlohmann.detail.exception.m">
an exception object as storage for error messages
</member>
        <member name="F:nlohmann.detail.exception.id">
the id of the exception
</member>
        <member name="M:nlohmann.detail.exception.what">
returns the explanatory string
</member>
        <member name="T:nlohmann.detail.exception">
@brief general exception of the @ref basic_json class
@sa https://json.nlohmann.me/api/basic_json/exception/
</member>
        <member name="M:nlohmann.detail.position_t.op_Implicit~System.UInt64">
conversion to size_t to preserve SAX interface
</member>
        <member name="F:nlohmann.detail.position_t.lines_read">
the number of lines read
</member>
        <member name="F:nlohmann.detail.position_t.chars_read_current_line">
the number of characters read in the current line
</member>
        <member name="F:nlohmann.detail.position_t.chars_read_total">
the total number of characters read
</member>
        <member name="T:nlohmann.detail.position_t">
struct to capture the start position of the current token
</member>
        <member name="T:clix.CLI_Encoding">
            <summary>CLI_Encoding types for strings</summary>
        </member>
        <member name="F:E_UTF16">
            <summary>UTF-16 encoding</summary>
            <remarks>
  This is the suggested encoding for marshaling and the native encoding of .NET strings.
  It is similar to UTF-8 but uses a minimum of two bytes per character, making the number
  of bytes required for a given string better predictable. Be aware, however, that UTF-16
  can still use more than two bytes for a character, so std::wstring::length() might not
  reflect the actual length of the string.
</remarks>
        </member>
        <member name="F:E_UTF8">
            <summary>UTF-8 encoding</summary>
            <remarks>
  This is the encoding commonly used for multilingual C++ strings. All ASCII characters
  (0-127) will be represented as single bytes. Be aware that UTF-8 uses more than one
  byte for extended characters, so std::string::length() might not reflect the actual
  length of the string in characters if it contains any non-ASCII characters.
</remarks>
        </member>
        <member name="F:E_ANSI">
            <summary>ANSI encoding</summary>
            <remarks>
  This is the default encoding you've most likely been using all around in C++. ANSI
  means 8 Bit encoding with character codes depending on the system's selected code page.
</remarks>
        </member>
        <member name="T:fmt.v8.ostream">
A fast output stream which is not thread-safe. 
</member>
        <member name="M:fmt.v8.bg(fmt.v8.detail.color_type)">
Creates a text style from the background color. 
</member>
        <member name="M:fmt.v8.fg(fmt.v8.detail.color_type)">
Creates a text style from the foreground (text) color. 
</member>
        <member name="T:fmt.v8.text_style">
A text style consisting of foreground and background colors and emphasis. 
</member>
        <member name="M:fmt.v8.gmtime(System.Int64)">
Converts given time since epoch as ``std::time_t`` value into calendar time,
expressed in Coordinated Universal Time (UTC). Unlike ``std::gmtime``, this
function is thread-safe on most platforms.

</member>
        <member name="M:fmt.v8.localtime(System.Int64)">
Converts given time since epoch as ``std::time_t`` value into calendar time,
expressed in local time. Unlike ``std::localtime``, this function is
thread-safe on most platforms.

</member>
        <member name="M:fmt.v8.literals.&quot;&quot;_format(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
  \rst
  User-defined literal equivalent of :func:`fmt::format`.

  **Example**::

    using namespace fmt::literals;
    std::string message = "The answer is {}"_format(42);
  \endrst

</member>
        <member name="M:fmt.v8.literals.&quot;&quot;_a(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
  \rst
  User-defined literal equivalent of :func:`fmt::arg`.

  **Example**::

    using namespace fmt::literals;
    fmt::print("Elapsed time: {s:.2f} seconds", "s"_a=1.23);
  \endrst

</member>
        <member name="M:fmt.v8.format_int.str">
\rst
Returns the content of the output buffer as an ``std::string``.
\endrst

</member>
        <member name="M:fmt.v8.format_int.c_str">
Returns a pointer to the output buffer content with terminating null
character appended.

</member>
        <member name="M:fmt.v8.format_int.data">
Returns a pointer to the output buffer content. No terminating null
character is appended.

</member>
        <member name="M:fmt.v8.format_int.size">
Returns the number of characters written to the output buffer. 
</member>
        <member name="T:fmt.v8.format_int">
Fast integer formatter. 
</member>
        <member name="T:fmt.v8.format_error">
A formatting error such as invalid format string. 
</member>
        <member name="M:entt.dispatcher.update">
 @brief Delivers all the pending events.

 This method is blocking and it doesn't return until all the events are
 delivered to the registered listeners. It's responsibility of the users
 to reduce at a minimum the time spent in the bodies of the listeners.

</member>
        <member name="M:entt.resolve(entt.type_info!System.Runtime.CompilerServices.IsConst)">
@brief Returns the meta type associated with a given type info object, if
any.
@param info The type info object of the requested type.
@return The meta type associated with the given type info object, if any.

</member>
        <member name="M:entt.resolve(System.UInt32!System.Runtime.CompilerServices.IsConst)">
@brief Returns the meta type associated with a given identifier, if any.
@param id Unique identifier.
@return The meta type associated with the given identifier, if any.

</member>
        <member name="M:entt.resolve">
@brief Returns a range to use to visit all meta types.
@return An iterable range to use to visit all meta types.

</member>
        <member name="M:entt.meta_associative_container.op_Explicit~System.Boolean">
@brief Returns false if a proxy is invalid, true otherwise.
@return False if the proxy is invalid, true otherwise.

</member>
        <member name="M:entt.meta_associative_container.find(entt.meta_any)">
@brief Returns an iterator to the element with a given key, if any.
@param key The key of the element to search.
@return An iterator to the element with the given key, if any.

</member>
        <member name="M:entt.meta_associative_container.erase(entt.meta_any)">
@brief Removes the specified element from a container.
@param key The key of the element to remove.
@return A bool denoting whether the removal took place.

</member>
        <member name="M:entt.meta_associative_container.insert(entt.meta_any,entt.meta_any)">
@brief Inserts an element (a key/value pair) into a container.
@param key The key of the element to insert.
@param value The value of the element to insert.
@return A bool denoting whether the insertion took place.

</member>
        <member name="M:entt.meta_associative_container.mapped_type">
@brief Returns the meta mapped type of a container.
@return The meta mapped type of the a container.

</member>
        <member name="M:entt.meta_associative_container.key_type">
@brief Returns the meta key type of a container.
@return The meta key type of the a container.

</member>
        <member name="M:entt.meta_associative_container.key_only">
@brief Returns true if a container is also key-only, false otherwise.
@return True if the associative container is also key-only, false otherwise.

</member>
        <member name="M:entt.meta_associative_container.meta_iterator.op_Explicit~System.Boolean">
@brief Returns false if an iterator is invalid, true otherwise.
@return False if the iterator is invalid, true otherwise.

</member>
        <member name="M:entt.meta_associative_container.meta_iterator.op_PointerDereference">
@brief Indirection operator.
@return The element to which the iterator points.

</member>
        <member name="M:entt.meta_associative_container.meta_iterator.op_Inequality(entt.meta_associative_container.meta_iterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two iterators refer to the same element.
@param other The iterator with which to compare.
@return False if the iterators refer to the same element, true otherwise.

</member>
        <member name="M:entt.meta_associative_container.meta_iterator.op_Equality(entt.meta_associative_container.meta_iterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two iterators refer to the same element.
@param other The iterator with which to compare.
@return True if the iterators refer to the same element, false otherwise.

</member>
        <member name="M:entt.meta_sequence_container.op_Explicit~System.Boolean">
@brief Returns false if a proxy is invalid, true otherwise.
@return False if the proxy is invalid, true otherwise.

</member>
        <member name="M:entt.meta_sequence_container.op_Subscript(System.UInt64)">
@brief Returns a reference to the element at a given location of a container
(no bounds checking is performed).
@param pos The position of the element to return.
@return A reference to the requested element properly wrapped.

</member>
        <member name="M:entt.meta_sequence_container.erase(entt.meta_sequence_container.meta_iterator)">
@brief Removes a given element from a container.
@param it Iterator to the element to remove.
@return A pair consisting of an iterator following the last removed element
(in case of success) and a bool denoting whether the insertion took place.

</member>
        <member name="M:entt.meta_sequence_container.insert(entt.meta_sequence_container.meta_iterator,entt.meta_any)">
@brief Inserts an element at a specified location of a container.
@param it Iterator before which the element will be inserted.
@param value Element value to insert.
@return A pair consisting of an iterator to the inserted element (in case of
success) and a bool denoting whether the insertion took place.

</member>
        <member name="M:entt.meta_sequence_container.end">
@brief Returns an iterator that is past the last element of a container.
@return An iterator that is past the last element of the container.

</member>
        <member name="M:entt.meta_sequence_container.begin">
@brief Returns an iterator to the first element of a container.
@return An iterator to the first element of the container.

</member>
        <member name="M:entt.meta_sequence_container.clear">
@brief Clears the content of a container.
@return True in case of success, false otherwise.

</member>
        <member name="M:entt.meta_sequence_container.resize(System.UInt64)">
@brief Resizes a container to contain a given number of elements.
@param sz The new size of the container.
@return True in case of success, false otherwise.

</member>
        <member name="M:entt.meta_sequence_container.size">
@brief Returns the size of a container.
@return The size of the container.

</member>
        <member name="M:entt.meta_sequence_container.value_type">
@brief Returns the meta value type of a container.
@return The meta value type of the container.

</member>
        <member name="M:entt.meta_sequence_container.meta_iterator.op_Explicit~System.Boolean">
@brief Returns false if an iterator is invalid, true otherwise.
@return False if the iterator is invalid, true otherwise.

</member>
        <member name="M:entt.meta_sequence_container.meta_iterator.op_PointerDereference">
@brief Indirection operator.
@return The element to which the iterator points.

</member>
        <member name="M:entt.meta_sequence_container.meta_iterator.op_Inequality(entt.meta_sequence_container.meta_iterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two iterators refer to the same element.
@param other The iterator with which to compare.
@return False if the iterators refer to the same element, true otherwise.

</member>
        <member name="M:entt.meta_sequence_container.meta_iterator.op_Equality(entt.meta_sequence_container.meta_iterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two iterators refer to the same element.
@param other The iterator with which to compare.
@return True if the iterators refer to the same element, false otherwise.

</member>
        <member name="M:entt.op_Inequality(entt.meta_type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,entt.meta_type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two objects refer to the same type.
@param lhs An object, either valid or not.
@param rhs An object, either valid or not.
@return False if the objects refer to the same node, true otherwise.

</member>
        <member name="M:entt.meta_type.reset">
 @brief Resets a type and all its parts.

 This function resets a type and all its data members, member functions
 and properties, as well as its constructors, destructors and conversion
 functions if any.<br />
 Base classes aren't reset but the link between the two types is removed.

 The type is also removed from the list of searchable types.

</member>
        <member name="M:entt.meta_type.op_Equality(entt.meta_type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two objects refer to the same type.
@param other The object with which to compare.
@return True if the objects refer to the same type, false otherwise.

</member>
        <member name="M:entt.meta_type.op_Explicit~System.Boolean">
@brief Returns true if an object is valid, false otherwise.
@return True if the object is valid, false otherwise.

</member>
        <member name="M:entt.meta_type.prop(entt.meta_any)">
 @brief Returns the property associated with a given key.

 Properties of the base classes will also be visited, if any.

 @param key The key to use to search for a property.
 @return The property associated with the given key, if any.

</member>
        <member name="M:entt.meta_type.prop">
@brief Returns a range to use to visit top-level properties.
@return An iterable range to use to visit top-level properties.

</member>
        <member name="M:entt.meta_type.get(System.UInt32!System.Runtime.CompilerServices.IsConst,entt.meta_handle)">
 @brief Gets the value of a given variable.

 It must be possible to cast the instance to the parent type of the data
 member. Otherwise, invoking the getter results in an undefined behavior.

 @param id Unique identifier.
 @param instance An opaque instance of the underlying type.
 @return A wrapper containing the value of the underlying variable.

</member>
        <member name="M:entt.meta_type.invoke(System.UInt32!System.Runtime.CompilerServices.IsConst,entt.meta_handle,entt.meta_any*!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
 @brief Invokes a function given an identifier, if possible.

 It must be possible to cast the instance to the parent type of the member
 function. Otherwise, invoking the underlying function results in an
 undefined behavior.

 @sa meta_func::invoke

 @param id Unique identifier.
 @param instance An opaque instance of the underlying type.
 @param args Parameters to use to invoke the function.
 @param sz Number of parameters to use to invoke the function.
 @return A wrapper containing the returned value, if any.

</member>
        <member name="M:entt.meta_type.construct(entt.meta_any*!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
 @brief Creates an instance of the underlying type, if possible.

 Parameters must be such that a cast or conversion to the required types
 is possible. Otherwise, an empty and thus invalid wrapper is returned.

 @param args Parameters to use to construct the instance.
 @param sz Number of parameters to use to construct the instance.
 @return A wrapper containing the new instance, if any.

</member>
        <member name="M:entt.meta_type.func(System.UInt32!System.Runtime.CompilerServices.IsConst)">
 @brief Returns the function associated with a given identifier.

 The functions of the base classes will also be visited, if any.<br />
 In the case of overloaded functions, the first one with the required
 identifier will be returned.

 @param id Unique identifier.
 @return The function associated with the given identifier, if any.

</member>
        <member name="M:entt.meta_type.func">
@brief Returns a range to use to visit top-level functions.
@return An iterable range to use to visit top-level functions.

</member>
        <member name="M:entt.meta_type.data(System.UInt32!System.Runtime.CompilerServices.IsConst)">
 @brief Returns the data associated with a given identifier.

 The data of the base classes will also be visited, if any.

 @param id Unique identifier.
 @return The data associated with the given identifier, if any.

</member>
        <member name="M:entt.meta_type.data">
@brief Returns a range to use to visit top-level data.
@return An iterable range to use to visit top-level data.

</member>
        <member name="M:entt.meta_type.ctor">
@brief Returns a range to use to visit top-level constructors.
@return An iterable range to use to visit top-level constructors.

</member>
        <member name="M:entt.meta_type.base(System.UInt32!System.Runtime.CompilerServices.IsConst)">
@brief Returns the base meta type associated with a given identifier.
@param id Unique identifier.
@return The base meta type associated with the given identifier, if any.

</member>
        <member name="M:entt.meta_type.base">
@brief Returns a range to use to visit top-level base meta types.
@return An iterable range to use to visit top-level base meta types.

</member>
        <member name="M:entt.meta_type.remove_extent">
@brief Provides the type for which the array is defined.
@return The type for which the array is defined or this type if it
doesn't refer to an array type.

</member>
        <member name="M:entt.meta_type.remove_pointer">
@brief Provides the type for which the pointer is defined.
@return The type for which the pointer is defined or this type if it
doesn't refer to a pointer type.

</member>
        <member name="M:entt.meta_type.extent(System.UInt64)">
@brief The number of elements along the given dimension of an array type.
@param dim The dimension of which to return the number of elements.
@return The number of elements along the given dimension in case of array
types, 0 otherwise.

</member>
        <member name="M:entt.meta_type.rank">
@brief Provides the number of dimensions of an array type.
@return The number of dimensions in case of array types, 0 otherwise.

</member>
        <member name="M:entt.meta_type.template_arg(System.UInt64)">
@brief Returns the type of the i-th template argument of a type.
@param index Index of the template argument of which to return the type.
@return The type of the i-th template argument of a type.

</member>
        <member name="M:entt.meta_type.template_type">
 @brief Returns a tag for the class template of the underlying type.

 @sa meta_class_template_tag

 @return The tag for the class template of the underlying type.

</member>
        <member name="M:entt.meta_type.template_arity">
@brief Returns the number of template arguments, if any.
@return The number of template arguments, if any.

</member>
        <member name="M:entt.meta_type.is_template_specialization">
@brief Checks whether a type refers to a recognized class template
specialization or not.
@return True if the type is a recognized class template specialization,
false otherwise.

</member>
        <member name="M:entt.meta_type.is_associative_container">
@brief Checks whether a type refers to an associative container or not.
@return True if the type is an associative container, false otherwise.

</member>
        <member name="M:entt.meta_type.is_sequence_container">
@brief Checks whether a type refers to a sequence container or not.
@return True if the type is a sequence container, false otherwise.

</member>
        <member name="M:entt.meta_type.is_pointer_like">
@brief Checks whether a type is a pointer-like type or not.
@return True if the underlying type is a pointer-like one, false
otherwise.

</member>
        <member name="M:entt.meta_type.is_member_function_pointer">
@brief Checks whether a type refers to a pointer to member function or
not.
@return True if the underlying type is a pointer to member function,
false otherwise.

</member>
        <member name="M:entt.meta_type.is_member_object_pointer">
@brief Checks whether a type refers to a pointer to data member or not.
@return True if the underlying type is a pointer to data member, false
otherwise.

</member>
        <member name="M:entt.meta_type.is_function_pointer">
@brief Checks whether a type refers to a function pointer or not.
@return True if the underlying type is a function pointer, false
otherwise.

</member>
        <member name="M:entt.meta_type.is_pointer">
@brief Checks whether a type refers to a pointer or not.
@return True if the underlying type is a pointer, false otherwise.

</member>
        <member name="M:entt.meta_type.is_class">
@brief Checks whether a type refers to a class or not.
@return True if the underlying type is a class, false otherwise.

</member>
        <member name="M:entt.meta_type.is_union">
@brief Checks whether a type refers to an union or not.
@return True if the underlying type is an union, false otherwise.

</member>
        <member name="M:entt.meta_type.is_enum">
@brief Checks whether a type refers to an enum or not.
@return True if the underlying type is an enum, false otherwise.

</member>
        <member name="M:entt.meta_type.is_array">
@brief Checks whether a type refers to an array type or not.
@return True if the underlying type is an array type, false otherwise.

</member>
        <member name="M:entt.meta_type.is_floating_point">
@brief Checks whether a type refers to a floating-point type or not.
@return True if the underlying type is a floating-point type, false
otherwise.

</member>
        <member name="M:entt.meta_type.is_integral">
@brief Checks whether a type refers to an integral type or not.
@return True if the underlying type is an integral type, false otherwise.

</member>
        <member name="M:entt.meta_type.is_void">
@brief Checks whether a type refers to void or not.
@return True if the underlying type is void, false otherwise.

</member>
        <member name="M:entt.meta_type.size_of">
@brief Returns the size of the underlying type if known.
@return The size of the underlying type if known, 0 otherwise.

</member>
        <member name="M:entt.meta_type.id">
@brief Returns the identifier assigned to a type.
@return The identifier assigned to the type.

</member>
        <member name="M:entt.meta_type.info">
@brief Returns the type info object of the underlying type.
@return The type info object of the underlying type.

</member>
        <member name="M:entt.meta_type.#ctor(entt.internal.meta_base_node*)">
@brief Constructs an instance from a given base node.
@param curr The base node with which to construct the instance.

</member>
        <member name="M:entt.meta_func.op_Explicit~System.Boolean">
@brief Returns true if an object is valid, false otherwise.
@return True if the object is valid, false otherwise.

</member>
        <member name="M:entt.meta_func.prop(entt.meta_any)">
@brief Returns the property associated with a given key.
@param key The key to use to search for a property.
@return The property associated with the given key, if any.

</member>
        <member name="M:entt.meta_func.invoke(entt.meta_handle,entt.meta_any*!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
 @brief Invokes the underlying function, if possible.

 To invoke a member function, the parameters must be such that a cast or
 conversion to the required types is possible. Otherwise, an empty and
 thus invalid wrapper is returned.<br />
 It must be possible to cast the instance to the parent type of the member
 function. Otherwise, invoking the underlying function results in an
 undefined behavior.

 @param instance An opaque instance of the underlying type.
 @param args Parameters to use to invoke the function.
 @param sz Number of parameters to use to invoke the function.
 @return A wrapper containing the returned value, if any.

</member>
        <member name="M:entt.meta_func.arg(System.UInt64)">
@brief Returns the type of the i-th argument of a member function.
@param index Index of the argument of which to return the type.
@return The type of the i-th argument of a member function.

</member>
        <member name="M:entt.meta_func.ret">
@brief Returns the return type of a member function.
@return The return type of the member function.

</member>
        <member name="M:entt.meta_func.is_static">
@brief Indicates whether a member function is static or not.
@return True if the member function is static, false otherwise.

</member>
        <member name="M:entt.meta_func.is_const">
@brief Indicates whether a member function is constant or not.
@return True if the member function is constant, false otherwise.

</member>
        <member name="M:entt.meta_func.arity">
@brief Returns the number of arguments accepted by a member function.
@return The number of arguments accepted by the member function.

</member>
        <member name="M:entt.meta_data.op_Explicit~System.Boolean">
@brief Returns true if an object is valid, false otherwise.
@return True if the object is valid, false otherwise.

</member>
        <member name="M:entt.meta_data.prop(entt.meta_any)">
@brief Returns the property associated with a given key.
@param key The key to use to search for a property.
@return The property associated with the given key, if any.

</member>
        <member name="M:entt.meta_data.get(entt.meta_handle)">
 @brief Gets the value of a given variable.

 It must be possible to cast the instance to the parent type of the data
 member. Otherwise, invoking the getter results in an undefined behavior.

 @param instance An opaque instance of the underlying type.
 @return A wrapper containing the value of the underlying variable.

</member>
        <member name="M:entt.meta_data.is_static">
@brief Indicates whether a data member is static or not.
@return True if the data member is static, false otherwise.

</member>
        <member name="M:entt.meta_data.is_const">
@brief Indicates whether a data member is constant or not.
@return True if the data member is constant, false otherwise.

</member>
        <member name="M:entt.meta_ctor.op_Explicit~System.Boolean">
@brief Returns true if an object is valid, false otherwise.
@return True if the object is valid, false otherwise.

</member>
        <member name="M:entt.meta_ctor.prop(entt.meta_any)">
@brief Returns the property associated with a given key.
@param key The key to use to search for a property.
@return The property associated with the given key, if any.

</member>
        <member name="M:entt.meta_ctor.prop">
@brief Returns a range to use to visit all properties.
@return An iterable range to use to visit all properties.

</member>
        <member name="M:entt.meta_ctor.invoke(entt.meta_any*!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
 @brief Creates an instance of the underlying type, if possible.

 Parameters must be such that a cast or conversion to the required types
 is possible. Otherwise, an empty and thus invalid wrapper is returned.

 @param args Parameters to use to construct the instance.
 @param sz Number of parameters to use to construct the instance.
 @return A wrapper containing the new instance, if any.

</member>
        <member name="M:entt.meta_ctor.arg(System.UInt64)">
@brief Returns the type of the i-th argument of a constructor.
@param index Index of the argument of which to return the type.
@return The type of the i-th argument of a constructor.

</member>
        <member name="M:entt.meta_ctor.arity">
@brief Returns the number of arguments accepted by a constructor.
@return The number of arguments accepted by the constructor.

</member>
        <member name="M:entt.meta_ctor.parent">
@brief Returns the type to which an object belongs.
@return The type to which the object belongs.

</member>
        <member name="M:entt.meta_prop.op_Explicit~System.Boolean">
@brief Returns true if an object is valid, false otherwise.
@return True if the object is valid, false otherwise.

</member>
        <member name="M:entt.meta_prop.value">
@brief Returns the stored value by copy.
@return A wrapper containing the value stored with the property.

</member>
        <member name="M:entt.meta_prop.key">
@brief Returns the stored key as a const reference.
@return A wrapper containing the key stored with the property.

</member>
        <member name="M:entt.meta_prop.#ctor(entt.internal.meta_prop_node!System.Runtime.CompilerServices.IsConst*)">
@brief Constructs an instance from a given node.
@param curr The underlying node with which to construct the instance.

</member>
        <member name="M:entt.meta_handle.op_MemberSelection">
@brief Access operator for accessing the contained opaque object.
@return A wrapper that shares a reference to an unmanaged object.

</member>
        <member name="M:entt.meta_handle.op_Explicit~System.Boolean">
@brief Returns false if a handle is invalid, true otherwise.
@return False if the handle is invalid, true otherwise.

</member>
        <member name="M:entt.meta_handle.op_Assign(entt.meta_handle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Default copy assignment operator, deleted on purpose.
@return This meta handle.

</member>
        <member name="T:entt.meta_handle">
 @brief Opaque pointers to instances of any type.

 A handle doesn't perform copies and isn't responsible for the contained
 object. It doesn't prolong the lifetime of the pointed instance.<br />
 Handles are used to generate references to actual objects when needed.

</member>
        <member name="M:entt.op_Inequality(entt.meta_any!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,entt.meta_any!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two wrappers differ in their content.
@param lhs A wrapper, either empty or not.
@param rhs A wrapper, either empty or not.
@return True if the two wrappers differ in their content, false otherwise.

</member>
        <member name="M:entt.meta_any.as_ref">
@brief Aliasing constructor.
@return A wrapper that shares a reference to an unmanaged object.

</member>
        <member name="M:entt.meta_any.op_Equality(entt.meta_any!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Checks if two wrappers differ in their content.
@param other Wrapper with which to compare.
@return False if the two objects differ in their content, true otherwise.

</member>
        <member name="M:entt.meta_any.op_Explicit~System.Boolean">
@brief Returns false if a wrapper is invalid, true otherwise.
@return False if the wrapper is invalid, true otherwise.

</member>
        <member name="M:entt.meta_any.op_PointerDereference">
@brief Indirection operator for dereferencing opaque objects.
@return A wrapper that shares a reference to an unmanaged object if the
wrapped element is dereferenceable, an invalid meta any otherwise.

</member>
        <member name="M:entt.meta_any.as_associative_container">
@brief Returns an associative container proxy.
@return An associative container proxy for the underlying object.

</member>
        <member name="M:entt.meta_any.as_sequence_container">
@brief Returns a sequence container proxy.
@return A sequence container proxy for the underlying object.

</member>
        <member name="M:entt.meta_any.get(System.UInt32!System.Runtime.CompilerServices.IsConst)">
@brief Gets the value of a given variable.
@param id Unique identifier.
@return A wrapper containing the value of the underlying variable.

</member>
        <member name="M:entt.meta_any.data">
@brief Returns an opaque pointer to the contained instance.
@return An opaque pointer the contained instance, if any.

</member>
        <member name="M:entt.meta_any.type">
@brief Returns the type of the underlying object.
@return The type of the underlying object, if any.

</member>
        <member name="M:entt.meta_any.op_Assign(entt.meta_any*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Move assignment operator.
@param other The instance to move from.
@return This meta any object.

</member>
        <member name="M:entt.meta_any.op_Assign(entt.meta_any!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy assignment operator.
@param other The instance to copy from.
@return This meta any object.

</member>
        <member name="M:entt.meta_any.#ctor(entt.meta_any*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Copy constructor.
@param other The instance to copy from.

@brief Move constructor.
@param other The instance to move from.

</member>
        <member name="M:entt.meta_ctx.bind(entt.meta_ctx)">
@brief Binds the meta system to a given context.
@param other A valid context to which to bind.

</member>
        <member name="T:entt.meta_ctx">
Internal details not to be documented.
@endcond

</member>
        <member name="T:entt.basic_collector{}">
 @brief Collector.

 A collector contains a set of rules (literally, matchers) to use to track
 entities.<br />
 Its main purpose is to generate a descriptor that allows an observer to know
 how to connect to a registry.

@brief Adds a grouping matcher to the collector.
@tparam AllOf Types of components tracked by the matcher.
@tparam NoneOf Types of components used to filter out entities.
@return The updated collector.

@brief Adds an observing matcher to the collector.
@tparam AnyOf Type of component for which changes should be detected.
@return The updated collector.

</member>
        <member name="T:entt.stable_storage_policy">
Internal details not to be documented.
@endcond

</member>
        <member name="M:entt.scoped_connection.op_Explicit~System.Boolean">
@brief Checks whether a scoped connection is properly initialized.
@return True if the connection is properly initialized, false otherwise.

</member>
        <member name="M:entt.scoped_connection.op_Assign(entt.connection)">
@brief Acquires a connection.
@param other The connection object to acquire.
@return This scoped connection.

</member>
        <member name="M:entt.scoped_connection.op_Assign(entt.scoped_connection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Default copy assignment operator, deleted on purpose.
@return This scoped connection.

</member>
        <member name="M:entt.scoped_connection.#ctor(entt.connection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Constructs a scoped connection from a basic connection.
@param other A valid connection object.

</member>
        <member name="T:entt.scoped_connection">
 @brief Scoped connection class.

 Opaque object the aim of which is to allow users to release an already
 estabilished connection without having to keep a reference to the signal or
 the sink that generated it.<br />
 A scoped connection automatically breaks the link between the two objects
 when it goes out of scope.

</member>
        <member name="M:entt.connection.op_Explicit~System.Boolean">
@brief Checks whether a connection is properly initialized.
@return True if the connection is properly initialized, false otherwise.

</member>
        <member name="T:entt.connection">
 @brief Connection class.

 Opaque object the aim of which is to allow users to release an already
 estabilished connection without having to keep a reference to the signal or
 the sink that generated it.

</member>
        <member name="M:entt.tombstone_t.op_Inequality(entt.tombstone_t!System.Runtime.CompilerServices.IsConst)">
@brief Compares two tombstone objects.
@param other A tombstone object.
@return False in all cases.

</member>
        <member name="M:entt.tombstone_t.op_Equality(entt.tombstone_t!System.Runtime.CompilerServices.IsConst)">
@brief Compares two tombstone objects.
@param other A tombstone object.
@return True in all cases.

</member>
        <member name="M:entt.null_t.op_Inequality(entt.null_t!System.Runtime.CompilerServices.IsConst)">
@brief Compares two null objects.
@param other A null object.
@return False in all cases.

</member>
        <member name="M:entt.null_t.op_Equality(entt.null_t!System.Runtime.CompilerServices.IsConst)">
@brief Compares two null objects.
@param other A null object.
@return True in all cases.

</member>
        <member name="M:entt.op_Inequality(entt.type_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,entt.type_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Compares the contents of two type info objects.
@param lhs A type info object.
@param rhs A type info object.
@return True if the two contents differ, false otherwise.

</member>
        <member name="M:entt.type_info.op_Equality(entt.type_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief Compares the contents of two type info objects.
@param other Object with which to compare.
@return False if the two contents differ, true otherwise.

</member>
        <member name="M:entt.type_info.name">
@brief Type name.
@return Type name.

</member>
        <member name="M:entt.type_info.hash">
@brief Type hash.
@return Type hash.

</member>
        <member name="M:entt.type_info.seq">
@brief Type sequential identifier.
@return Type sequential identifier.

</member>
        <member name="M:entt.type_info.op_Explicit~System.Boolean">
@brief Default copy assignment operator.
@return This type info object.

@brief Default move assignment operator.
@return This type info object.

@brief Checks if a type info object is properly initialized.
@return True if the object is properly initialized, false otherwise.

</member>
        <member name="M:entt.literals.&quot;&quot;_hws(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
@brief User defined literal for hashed wstrings.
@param str The literal without its suffix.
@return A properly initialized hashed wstring.

</member>
        <member name="M:entt.literals.&quot;&quot;_hs(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
@brief User defined literal for hashed strings.
@param str The literal without its suffix.
@return A properly initialized hashed string.

</member>
        <member name="T:entt.std_sort">
 @brief Function object to wrap `std::sort` in a class type.

 Unfortunately, `std::sort` cannot be passed as template argument to a class
 template or a function template.<br />
 This class fills the gap by wrapping some flavors of `std::sort` in a
 function object.

</member>
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:LL.getAllPlugins”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:Translation.getI18N(HINSTANCE__*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“T:entt.dispatcher”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:fmt.v8.format_system_error(fmt.v8.detail.buffer<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。-->
    </members>
</doc>